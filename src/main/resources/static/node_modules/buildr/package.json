{
  "_args": [
    [
      {
        "raw": "buildr@0.8.x",
        "scope": null,
        "escapedName": "buildr",
        "name": "buildr",
        "rawSpec": "0.8.x",
        "spec": ">=0.8.0 <0.9.0",
        "type": "range"
      },
      "W:\\GameNation\\src\\main\\resources\\static\\node_modules\\historyjs"
    ]
  ],
  "_from": "buildr@>=0.8.0 <0.9.0",
  "_id": "buildr@0.8.7",
  "_inCache": true,
  "_installable": true,
  "_location": "/buildr",
  "_npmUser": {
    "name": "brandonramirez",
    "email": "brandon.s.ramirez@gmail.com"
  },
  "_npmVersion": "1.2.15",
  "_phantomChildren": {},
  "_requested": {
    "raw": "buildr@0.8.x",
    "scope": null,
    "escapedName": "buildr",
    "name": "buildr",
    "rawSpec": "0.8.x",
    "spec": ">=0.8.0 <0.9.0",
    "type": "range"
  },
  "_requiredBy": [
    "/historyjs"
  ],
  "_resolved": "https://registry.npmjs.org/buildr/-/buildr-0.8.7.tgz",
  "_shasum": "9b4dac560a7f41ee63a148c5a4efc51bdb0b8452",
  "_shrinkwrap": null,
  "_spec": "buildr@0.8.x",
  "_where": "W:\\GameNation\\src\\main\\resources\\static\\node_modules\\historyjs",
  "author": {
    "name": "Benjamin Lupton",
    "email": "b@lupton.cc",
    "url": "http://balupton.com"
  },
  "bin": {
    "buildr": "./bin/buildr.js"
  },
  "bugs": {
    "url": "https://github.com/balupton/buildr.npm/issues"
  },
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "http://balupton.com"
    },
    {
      "name": "Brandon Ramirez",
      "email": "brandon.s.ramirez@gmail.com",
      "url": "http://www.brandonsramirez.com/"
    }
  ],
  "dependencies": {
    "bal-util": "1.x",
    "caterpillar": "1.x",
    "coffee-script": "1.4.x",
    "cson": ">=1.4",
    "csslint": "0.9.x",
    "jshint": "0.9.x",
    "less": "1.3.x",
    "optimist": ">=0.3",
    "pulverizr": "0.7.x",
    "rimraf": "2.1.4",
    "uglify-js": "1.3.x",
    "watch-tree-maintained": "0.1.x"
  },
  "description": "The (Java|Coffee)Script and (CSS|Less) (Builder|Bundler|Packer|Minifier|Merger|Checker)",
  "devDependencies": {},
  "directories": {
    "lib": "lib"
  },
  "dist": {
    "shasum": "9b4dac560a7f41ee63a148c5a4efc51bdb0b8452",
    "tarball": "https://registry.npmjs.org/buildr/-/buildr-0.8.7.tgz"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "homepage": "https://github.com/balupton/buildr.npm",
  "keywords": [
    "javascript",
    "coffee",
    "lesscss",
    "less",
    "css",
    "builder",
    "package",
    "compile",
    "compress",
    "minify",
    "bundle",
    "merge",
    "lint"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://creativecommons.org/licenses/MIT/"
    }
  ],
  "main": "./lib/buildr.js",
  "maintainers": [
    {
      "name": "balupton",
      "email": "b@lupton.cc"
    },
    {
      "name": "brandonramirez",
      "email": "brandon.s.ramirez@gmail.com"
    }
  ],
  "name": "buildr",
  "optionalDependencies": {},
  "readme": "# Welcome to Buildr\n\nThe (Java|Coffee)Script and (CSS|Less) (Builder|Bundler|Packer|Minifier|Merger|Checker)\n\n\n## Install\n\n1. [Install Node.js](http://bevry.me/node/install)\n\n1. Install dependencies for image compression\n\n\t- On OSX\n\t\t\n\t\t\truby -e \"$(curl -fsSLk https://gist.github.com/raw/323731/install_homebrew.rb)\"\n\t\t\tbrew install gifsicle libjpeg optipng pngcrush\n\t\n\t- On Apt Linux\n\t\t\n\t\t\tsudo apt-get update && sudo apt-get install gifsicle libjpeg-progs optipng pngcrush\n\t\n\t- On Yum Linux\n\t\t\n\t\t\tsudo yum -y install gifsicle libjpeg-progs optipng pngcrush\n\t\n\t- Windows\n\n\t\t> Hahahahaha\n\n\n## Configure\n\nBefore you use Buildr, you must specify some configuration for it. The available configuration is:\n\n``` coffeescript\n{\n\t# Options\n\tname: null # (name to be outputted in log messages) String or null\n\tlog: true # (log status updates to console?) true or false\n\twatch: false # (automatically rebuild on file change?) true or false\n\n\t# Handlers\n\tbuildHandler: false # (fired when build completed) function or false\n\trebuildHandler: false # (fired when rebuild completed) function or false\n\tsuccessHandler: false # (fired when (re)build completed successfully) function or false\n\n\t# Paths\n\tsrcPath: false # String\n\toutPath: false # String or false\n\n\t# Checking\n\tcheckScripts: true # Array or true or false\n\tcheckStyles: true # Array or true or false\n\tjshintOptions: false # Object or false\n\tcsslintOptions: false # Object or false\n\n\t# Compression (requires outPath)\n\tcompressScripts: true # Array or true or false\n\tcompressStyles: true # Array or true or false\n\tcompressImages: true # Array or true or false\n\n\t# Order\n\tscriptsOrder: false # Array or false\n\tstylesOrder: false # Array or false\n\n\t# Bundling (requires Order)\n\tbundleScriptPath: false # String or false\n\tbundleStylePath: false # String or false\n\tdeleteBundledFiles: true # (requires outPath) true or false \n\n\t# Loaders (requires Order)\n\tsrcLoaderHeader: false # String or false\n\tsrcLoaderPath: false # String or false\n}\n```\n\nThe above values are the default values for those options. The settings which are set to `true` will auto-detect the files for you.\n\n\n### Options\n\nThere are currently two options available, the `log` and `watch` options.\n\n- The `log` option when enabled will output all status messages, by default this is enabled.\n- The `watch` option when enabled will allow buildr to run in the background watching for changes in our `srcPath`, if a change is detected then our project is automatically rebuilt for us, by default this is disabled.\n\n\n### Handlers\n\nThere are two handlers you can configure, they are the `buildHandler` and the `rebuildHandler`.\n\n- The `buildHandler` is fired after our project has been built.\n- The `rebuildHandler` is fired after our project has been rebuilt. Our project is rebuilt when we utilise the `watch: true` config option, which scans for changes in the background and automatically rebuilds our project on change. If this isn't specified, then the `buildHandler` will automatically be used as the `rebuildHandler`.\n\nThey are both passed a single argument called `err` which is either an `Error` instance, or `false` if no error occurred. They both also have default values, so you don't need to specify them if you don't want to.\n\n\n### Checking\n\nTo pass your scripts through jshint and your styles through csslint, you'd want the following configuration:\n\n``` coffeescript\n{\n\t# Paths\n\tsrcPath: 'src' # String\n\n\t# Checking\n\tcheckScripts: true # Array or true or false\n\tcheckStyles: true # Array or true or false\n\tjshintOptions: false # Object or false\n\tcsslintOptions: false # Object or false\n}\n```\n\n\n### Compression\n\nTo copy your `src` directory to an `out` directory, then compile and compress all your styles and scripts in the `out` directory, you'd want the following configuration:\n\n``` coffeescript\n{\n\t# Paths\n\tsrcPath: 'src' # String\n\toutPath: 'out' # String or false\n\n\t# Compression (without outPath only the generated bundle files are compressed)\n\tcompressScripts: true # Array or true or false\n\tcompressStyles: true # Array or true or false\n\tcompressImages: true # Array or true or false\n}\n```\n\nIf your `outPath` is the same as your `srcPath` then the only files which will be compressed are the generated bundle files.\n\n\n### Bundling\n\nTo bundle all your style files into one file called `out/bundled.css` and all your script files into one file called `out/bundled.js`, you'd want the following configuration:\n\n``` coffeescript\n{\n\t# Paths\n\tsrcPath: 'src' # String\n\toutPath: 'out' # String or false\n\n\t# Order\n\tscriptsOrder: [\n\t\t'script1.js'\n\t\t'script2.coffee'\n\t] # Array or false\n\tstylesOrder: [\n\t\t'style1.css'\n\t\t'style2.less'\n\t] # Array or false\n\n\t# Bundling (requires Order)\n\tbundleScriptPath: false # String or false\n\tbundleStylePath: false # String or false\n\tdeleteBundledFiles: true # (requires outPath) true or false \n}\n```\n\n\n### Loaders\n\nTo generate a source loader file called `src/loader.js` which will load in all your source styles and scripts into the page, you can use the following:\n\n``` coffeescript\n{\n\t# Paths\n\tsrcPath: 'src' # String\n\n\t# Order\n\tscriptsOrder: [\n\t\t'script1.js'\n\t\t'script2.coffee'\n\t] # Array or false\n\tstylesOrder: [\n\t\t'style1.css'\n\t\t'style2.less'\n\t] # Array or false\n\n\t# Loaders (requires Order)\n\tsrcLoaderHeader: '''\n\t\t# Prepare\n\t\tmyprojectEl = document.getElementById('myproject-include')\n\t\tmyprojectBaseUrl = myprojectEl.src.replace(/\\\\?.*$/,'').replace(/loader\\\\.js$/, '').replace(/\\\\/+$/, '')+'/'\n\n\t\t# Load in with Buildr\n\t\tmyprojectBuildr = new window.Buildr {\n\t\t\tbaseUrl: myprojectBaseUrl\n\t\t\tbeforeEl: myprojectEl\n\t\t\tserverCompilation: window.serverCompilation or false\n\t\t\tscripts: scripts\n\t\t\tstyles: styles\n\t\t}\n\t\tmyprojectBuildr.load()\n\t\t''' # note, all \\ in this are escaped due to it being in a string\n\tsrcLoaderPath: 'src/myproject.loader.js' # String or false\n}\n```\n\nThen include into your page with the following html:\n\n``` html\n<script id=\"myproject-include\" src=\"../../loader.js\"></script>\n```\n\nThis is incredibly useful for developing apps which have lots of files, as instead of updating all your demo page's html with the new script and style files all the time, you just include the loader.\n\n\n### Combining\n\nYou can feel free to combine any of the configurations above to get something which checks, compiles, compresses, bundles, and generates loaders too. Though compression and bundling is dependent on having an `outPath` which is different from your `srcPath`.\n\n\n## Run\n\n### As a Command Line Tool\n\nWithin your application folder\n\n1. Install Buildr Globally\n\n\t\tnpm -g install buildr\n\n2. Stick your configuration in `buildr.cson`\n\n3. Run the global buildr\n\n\t\tbuildr\n\nYou may specify the filename for configuring by passing -f <filename> or --file <filename> on the command-line.\n\n### As a Module\n\nWithin your application folder\n\n1. Install Buildr Locally\n\n\t\tnpm install buildr\n\n2. Code `buildr.coffee`\n\n\t``` coffeescript\n\tbuildr = require 'buildr'\n\tconfig = {} # your configuration\n\tmyBuildr = buildr.createInstance(config)\n\tmyBuildr.process (err) ->\n\t\tthrow err if err\n\t\tconsole.log 'Building completed'\n\t```\n\n3. Run your buildr file\n\n\t\tcoffee buildr.coffee\n\n\n## License\n\nLicensed under the [MIT License](http://creativecommons.org/licenses/MIT/)\nCopyright 2011 [Benjamin Arthur Lupton](http://balupton.com)\n\n\n## History\n\n### Changelog\n\n- v0.8.7 March 24, 2013\n  - Fix issue 34\n  - Fix syntax error in CLI script which prevents error reporting.\n  - Copy source files recursively again (reverting v0.8.5 fix) which is safe because we switched to rimraf (to fix issue 34).\n\n- v0.8.6 March 17, 2013\n  - Replace deprecated path.exists call with fs.exists.\n  - Fix build issue with Cakefile.\n  - Fix issue 32 and 33\n\n- v0.8.5 November 11, 2012\n  - Fix problem with copying of hidden directories like .svn/\n\n- v0.8.4 November 5, 2012\n  - Fix bug 31: Log level debug is always used, regardless of configuration.\n\n- v0.8.3 October 28, 2012\n  - Feature request #13: specify .cson file at command line\n  - Feature request #15: Macro preprocessor\n  - Fix bugs 8, 19, 20, 21, 23, 25, 27, 28, 30\n  - Use cake to build JavaScript, making buildr easier to run\n  - Updated dependencies to fix several bugs\n\n- v0.8 September 27, 2011\n\t- Fixed concurrency support\n\t- Fixed compression under certain configurations\n\t- Added [Caterpillar](https://github.com/balupton/caterpillar.npm) for awesome console logging\n\n- v0.7 August 22, 2011\n\t- Added `watch`, `buildHandler` and `rebuildHandler` options\n\n- v0.6 July 21, 2011\n\t- v0.6.0 July 21, 2011\n\t\t- Added javascript, image and css compression\n\t\t- Added jshint and csslint checks\n\t- v0.6.6 August 16, 2011\n\t\t- Fixed relative paths between outPath and bundledPaths\n\n- v0.5 July 9, 2011\n\t- Added srcLoader compilation\n\n- v0.4 July 1, 2011\n\t- Extremely Simplified\n\t- Only supports bundling of js|coffee and css|less files currently\n\n- v0.3 May 31, 2011\n\t- Exploration into better architectures\n\n- v0.2 April 2, 2011\n\t- Initial Release\n\n- v0.1 March 23, 2011\n\t- Initial Commit\n\n### Todo\n\n- Needs auto file finding for bundling/orders\n- Needs no-config version\n- Needs unit tests\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/balupton/buildr.npm.git"
  },
  "scripts": {
    "prepublish": "cake clean build"
  },
  "version": "0.8.7"
}
