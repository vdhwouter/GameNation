// Generated by CoffeeScript 1.6.2
var ConsoleTransport, Logger, Transport, _ref,
  __hasProp = {}.hasOwnProperty,
  __slice = [].slice;

_ref = require(__dirname + '/transport'), Transport = _ref.Transport, ConsoleTransport = _ref.ConsoleTransport;

Logger = (function() {
  Logger.prototype.config = {
    autoFlush: true,
    transports: null,
    level: 7,
    levels: {
      emergency: 0,
      alert: 1,
      critical: 2,
      error: 3,
      warning: 4,
      notice: 5,
      info: 6,
      debug: 7,
      emerg: 0,
      crit: 2,
      err: 3,
      warn: 4,
      note: 5,
      "default": 6
    }
  };

  Logger.prototype.messages = [];

  Logger.prototype.formatter = null;

  Logger.prototype.transports = [];

  function Logger(config) {
    var key, levels, transport, value, _i, _len, _ref1, _ref2, _ref3, _ref4, _ref5;

    this.messages = [];
    this.transports = [];
    config || (config = {});
    _ref1 = this.config;
    for (key in _ref1) {
      if (!__hasProp.call(_ref1, key)) continue;
      value = _ref1[key];
      if ((_ref2 = config[key]) == null) {
        config[key] = value;
      }
    }
    levels = {};
    _ref3 = config.levels;
    for (key in _ref3) {
      if (!__hasProp.call(_ref3, key)) continue;
      value = _ref3[key];
      if ((_ref4 = levels[key]) == null) {
        levels[key] = value;
      }
    }
    config.levels = levels;
    if (!config.transports) {
      config.transports = new ConsoleTransport;
    }
    if (!(config.transports instanceof Array)) {
      config.transports = [config.transports];
    }
    _ref5 = config.transports;
    for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
      transport = _ref5[_i];
      if (transport instanceof Transport) {
        this.transports.push(transport);
      } else if (transport) {
        this.transports.push(new ConsoleTransport(transport));
      }
    }
    delete config.transports;
    if (config.level) {
      this.setLevel(config.level);
    }
    this.config = config;
  }

  Logger.prototype.getLevel = function() {
    var _ref1;

    return (_ref1 = this.config.level) != null ? _ref1 : null;
  };

  Logger.prototype.setLevel = function(level) {
    var transport, _i, _len, _ref1;

    this.config.level = level;
    _ref1 = this.transports;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      transport = _ref1[_i];
      transport.setLevel(level);
    }
    return this;
  };

  Logger.prototype.getLevelCode = function(name) {
    var _ref1;

    return (_ref1 = this.config.levels[name]) != null ? _ref1 : null;
  };

  Logger.prototype.getLevelName = function(code) {
    var key, value, _ref1;

    _ref1 = this.config.levels;
    for (key in _ref1) {
      if (!__hasProp.call(_ref1, key)) continue;
      value = _ref1[key];
      if (value === code) {
        return key;
      }
    }
    return null;
  };

  Logger.prototype.log = function() {
    var args, level, levelCode, levelName;

    level = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (typeof level === 'number') {
      levelCode = level;
      levelName = this.getLevelName(levelCode);
    } else {
      levelName = level;
      levelCode = this.getLevelCode(levelName);
      levelName = this.getLevelName(levelCode);
      if (levelCode == null) {
        levelCode = this.getLevelCode('default');
        levelName = this.getLevelName(levelCode);
        args.unshift(level);
      }
    }
    if (this.config.autoFlush) {
      this.write(levelCode, levelName, args);
    } else {
      this.messages.push({
        levelCode: levelCode,
        levelName: levelName,
        args: args
      });
    }
    return this;
  };

  Logger.prototype.flush = function() {
    var args, levelCode, levelName, _i, _len, _ref1, _ref2;

    _ref1 = this.messages;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      _ref2 = _ref1[_i], levelCode = _ref2.levelCode, levelName = _ref2.levelName, args = _ref2.args;
      this.write(levelCode, levelName, args);
    }
    return this;
  };

  Logger.prototype.write = function(levelCode, levelName, args) {
    var transport, _i, _len, _ref1;

    _ref1 = this.transports;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      transport = _ref1[_i];
      transport.write(levelCode, levelName, args);
    }
    return this;
  };

  return Logger;

})();

module.exports = {
  Logger: Logger
};
