// Generated by CoffeeScript 1.6.2
var ConsoleFormatter, ConsoleTransport, Formatter, Transport, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = require(__dirname + '/formatter'), Formatter = _ref.Formatter, ConsoleFormatter = _ref.ConsoleFormatter;

Transport = (function() {
  Transport.prototype.config = {
    level: 7,
    formatter: null
  };

  function Transport(config) {
    var key, value, _ref1, _ref2;

    config || (config = {});
    _ref1 = this.config;
    for (key in _ref1) {
      if (!__hasProp.call(_ref1, key)) continue;
      value = _ref1[key];
      if ((_ref2 = config[key]) == null) {
        config[key] = value;
      }
    }
    if (config.formatter instanceof Formatter) {
      this.formatter = config.formatter;
    } else {
      this.formatter = new ConsoleFormatter(config.formatter);
    }
    delete config.formatter;
    this.config = config;
  }

  Transport.prototype.getLevel = function() {
    var _ref1;

    return (_ref1 = this.config.level) != null ? _ref1 : null;
  };

  Transport.prototype.setLevel = function(level) {
    this.config.level = level;
    if (this.formatter) {
      this.formatter.setLevel(level);
    }
    return this;
  };

  Transport.prototype.care = function(levelCode) {
    return levelCode <= this.config.level;
  };

  Transport.prototype.write = function(levelCode, levelName, message) {
    if (this.care(levelCode)) {
      return message = this.formatter.format(levelCode, levelName, message);
    } else {
      return null;
    }
  };

  return Transport;

})();

ConsoleTransport = (function(_super) {
  __extends(ConsoleTransport, _super);

  function ConsoleTransport() {
    _ref1 = ConsoleTransport.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  ConsoleTransport.prototype.write = function(levelCode, levelName, message) {
    message = ConsoleTransport.__super__.write.call(this, levelCode, levelName, message);
    if (message != null) {
      return console.log(message);
    }
  };

  return ConsoleTransport;

})(Transport);

module.exports = {
  Transport: Transport,
  ConsoleTransport: ConsoleTransport
};
