// Generated by CoffeeScript 1.6.2
var ConsoleFormatter, Formatter, cliColor, err, util, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

util = require('util');

try {
  cliColor = require('cli-color');
} catch (_error) {
  err = _error;
  cliColor = null;
}

Formatter = (function() {
  Formatter.prototype.config = {
    colors: {
      0: 'red',
      1: 'red',
      2: 'red',
      3: 'red',
      4: 'yellow',
      5: 'yellow',
      6: 'green',
      7: 'green'
    },
    level: 7
  };

  function Formatter(config) {
    var key, value, _ref, _ref1;

    config || (config = {});
    _ref = this.config;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      value = _ref[key];
      if ((_ref1 = config[key]) == null) {
        config[key] = value;
      }
    }
    this.config = config;
  }

  Formatter.prototype.getLevel = function() {
    var _ref;

    return (_ref = this.config.level) != null ? _ref : null;
  };

  Formatter.prototype.setLevel = function(level) {
    this.config.level = level;
    return this;
  };

  Formatter.prototype.padLeft = function(padding, size, msg) {
    var i, _i, _ref;

    padding = String(padding);
    msg = String(msg);
    if (msg.length < size) {
      for (i = _i = 0, _ref = size - msg.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        msg = padding + msg;
      }
    }
    return msg;
  };

  Formatter.prototype.padRight = function(padding, size, msg) {
    var i, _i, _ref;

    padding = String(padding);
    msg = String(msg);
    if (msg.length < size) {
      for (i = _i = 0, _ref = size - msg.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        msg += padding;
      }
    }
    return msg;
  };

  Formatter.prototype.details = function(levelCode, levelName, args) {
    var color, date, file, index, line, message, method, parts, value, _i, _len, _ref;

    date = this.getDate();
    _ref = this.getLineInfo(), file = _ref.file, line = _ref.line, method = _ref.method;
    color = this.getColor(levelCode);
    parts = [];
    for (index = _i = 0, _len = args.length; _i < _len; index = ++_i) {
      value = args[index];
      parts[index] = typeof value === 'string' ? value : util.inspect(value, false, 10);
    }
    message = parts.join(' ');
    return {
      date: date,
      file: file,
      line: line,
      method: method,
      color: color,
      levelName: levelName,
      message: message
    };
  };

  Formatter.prototype.format = function(levelCode, levelName, args) {
    var className, date, line, message, _ref;

    _ref = this.details(levelCode, levelName, args), date = _ref.date, className = _ref.className, line = _ref.line, levelName = _ref.levelName, message = _ref.message;
    if (this.config.level === 7) {
      return message = ("[" + date + "] [" + className + ": " + line + "] ") + this.padLeft(' ', 10, "" + levelName + ":") + (" " + message);
    } else {
      return message = this.padLeft(' ', 10, "" + levelName + ":") + (" " + message);
    }
  };

  Formatter.prototype.getColor = function(levelCode) {
    var color;

    return color = this.config.colors ? this.config.colors[levelCode] : false;
  };

  Formatter.prototype.getDate = function() {
    var date, hours, minutes, month, ms, now, seconds, year;

    now = new Date();
    year = now.getFullYear();
    month = this.padLeft('0', 2, now.getMonth() + 1);
    date = this.padLeft('0', 2, now.getDate());
    hours = this.padLeft('0', 2, now.getHours());
    minutes = this.padLeft('0', 2, now.getMinutes());
    seconds = this.padLeft('0', 2, now.getSeconds());
    ms = this.padLeft('0', 3, now.getMilliseconds());
    return "" + year + "-" + month + "-" + date + " " + hours + ":" + minutes + ":" + seconds + "." + ms;
  };

  Formatter.prototype.getLineInfo = function() {
    var e, line, lines, parts, result, _i, _len;

    result = {
      line: -1,
      method: 'unknown'
    };
    try {
      throw new Error();
    } catch (_error) {
      e = _error;
      lines = e.stack.split('\n');
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (line.indexOf(__dirname) !== -1 || line.indexOf(' at ') === -1) {
          continue;
        }
        parts = line.split(':');
        if (parts[0].indexOf('(') === -1) {
          result.method = 'unknown';
          result.file = parts[0].replace(/^.+?\s+at\s+/, '');
        } else {
          result.method = parts[0].replace(/^.+?\s+at\s+/, '').replace(/\s+\(.+$/, '');
          result.file = parts[0].replace(/^.+?\(/, '');
        }
        result.line = parts[1];
        break;
      }
    }
    return result;
  };

  return Formatter;

})();

ConsoleFormatter = (function(_super) {
  __extends(ConsoleFormatter, _super);

  function ConsoleFormatter() {
    _ref = ConsoleFormatter.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ConsoleFormatter.prototype.format = function(levelCode, levelName, args) {
    var color, date, debugFormatter, debugString, file, line, message, messageFormatter, messageString, method, seperator, _ref1;

    _ref1 = this.details(levelCode, levelName, args), date = _ref1.date, file = _ref1.file, line = _ref1.line, method = _ref1.method, color = _ref1.color, levelName = _ref1.levelName, message = _ref1.message;
    if (!message) {
      return message;
    } else {
      color = color && (cliColor != null ? cliColor[color] : void 0) || function(str) {
        return str;
      };
      levelName = color(levelName + ':');
      debugFormatter = false;
      messageFormatter = color && (cliColor != null ? cliColor.bold : void 0);
      messageString = "" + levelName + " " + message;
      if (messageFormatter) {
        messageString = messageFormatter(messageString);
      }
      if (this.config.level === 7) {
        seperator = '\n    â†’ ';
        debugString = "[" + date + "] [" + file + ":" + line + "] [" + method + "]";
        if (debugFormatter) {
          debugString = lineFormatter(debugString);
        }
        return message = "" + messageString + seperator + debugString;
      } else {
        return message = messageString;
      }
    }
  };

  return ConsoleFormatter;

})(Formatter);

module.exports = {
  cliColor: cliColor,
  Formatter: Formatter,
  ConsoleFormatter: ConsoleFormatter
};
